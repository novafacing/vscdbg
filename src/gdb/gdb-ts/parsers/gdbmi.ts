// Generated by Peggy 1.2.0.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
    function C() {
        this.constructor = child;
    }
    C.prototype = parent.prototype;
    child.prototype = new C();
}

export function peg$SyntaxError(message, expected, found, location) {
    var self = Error.call(this, message);
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self, peg$SyntaxError.prototype);
    }
    self.expected = expected;
    self.found = found;
    self.location = location;
    self.name = "SyntaxError";
    return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString = " ") {
    padString = padString || " ";
    if (str.length > targetLength) {
        return str;
    }
    targetLength -= str.length;
    padString += padString.repeat(targetLength);
    return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function (sources) {
    var str = "Error: " + this.message;
    if (this.location) {
        var src = null;
        var k;
        for (k = 0; k < sources.length; k++) {
            if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
            }
        }
        var s = this.location.start;
        var loc = this.location.source + ":" + s.line + ":" + s.column;
        if (src) {
            var e = this.location.end;
            var filler = peg$padEnd("", s.line.toString().length);
            var line = src[s.line - 1];
            var last = s.line === e.line ? e.column : line.length + 1;
            str +=
                "\n --> " +
                loc +
                "\n" +
                filler +
                " |\n" +
                s.line +
                " | " +
                line +
                "\n" +
                filler +
                " | " +
                peg$padEnd("", s.column - 1) +
                peg$padEnd("", last - s.column, "^");
        } else {
            str += "\n at " + loc;
        }
    }
    return str;
};

peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
            return '"' + literalEscape(expectation.text) + '"';
        },

        class: function (expectation) {
            var escapedParts = expectation.parts.map(function (part) {
                return Array.isArray(part)
                    ? classEscape(part[0]) + "-" + classEscape(part[1])
                    : classEscape(part);
            });

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function () {
            return "any character";
        },

        end: function () {
            return "end of input";
        },

        other: function (expectation) {
            return expectation.description;
        },
    };

    function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/"/g, '\\"')
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) {
                return "\\x0" + hex(ch);
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
                return "\\x" + hex(ch);
            });
    }

    function classEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/\]/g, "\\]")
            .replace(/\^/g, "\\^")
            .replace(/-/g, "\\-")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) {
                return "\\x0" + hex(ch);
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
                return "\\x" + hex(ch);
            });
    }

    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
        var descriptions = expected.map(describeExpectation);
        var i, j;

        descriptions.sort();

        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i];
                    j++;
                }
            }
            descriptions.length = j;
        }

        switch (descriptions.length) {
            case 1:
                return descriptions[0];

            case 2:
                return descriptions[0] + " or " + descriptions[1];

            default:
                return (
                    descriptions.slice(0, -1).join(", ") +
                    ", or " +
                    descriptions[descriptions.length - 1]
                );
        }
    }

    function describeFound(found) {
        return found ? '"' + literalEscape(found) + '"' : "end of input";
    }

    return (
        "Expected " +
        describeExpected(expected) +
        " but " +
        describeFound(found) +
        " found."
    );
};

export function peg$parse(input, options: any | undefined = undefined) {
    options = options !== undefined ? options : {};

    var peg$FAILED = {};
    var peg$source = options.grammarSource;

    var peg$startRuleFunctions = { Line: peg$parseLine };
    var peg$startRuleFunction = peg$parseLine;

    var peg$c0 = "(gdb) ";
    var peg$c1 = "^";
    var peg$c2 = "*";
    var peg$c3 = "+";
    var peg$c4 = "=";
    var peg$c5 = "~";
    var peg$c6 = "@";
    var peg$c7 = "&";
    var peg$c8 = ",";
    var peg$c9 = "{}";
    var peg$c10 = "{";
    var peg$c11 = "}";
    var peg$c12 = "[]";
    var peg$c13 = "[";
    var peg$c14 = "]";
    var peg$c15 = "done";
    var peg$c16 = "running";
    var peg$c17 = "connected";
    var peg$c18 = "error";
    var peg$c19 = "exit";
    var peg$c20 = "stopped";
    var peg$c21 = '"';
    var peg$c22 = "%";
    var peg$c23 = "\\";
    var peg$c24 = "b";
    var peg$c25 = "f";
    var peg$c26 = "n";
    var peg$c27 = "r";
    var peg$c28 = "t";

    var peg$r0 = /^[^%\\"]/;
    var peg$r1 = /^[0-7]/;
    var peg$r2 = /^[a-z\-_]/;
    var peg$r3 = /^[0-9]/;

    var peg$e0 = peg$literalExpectation("(gdb) ", false);
    var peg$e1 = peg$anyExpectation();
    var peg$e2 = peg$literalExpectation("^", false);
    var peg$e3 = peg$literalExpectation("*", false);
    var peg$e4 = peg$literalExpectation("+", false);
    var peg$e5 = peg$literalExpectation("=", false);
    var peg$e6 = peg$literalExpectation("~", false);
    var peg$e7 = peg$literalExpectation("@", false);
    var peg$e8 = peg$literalExpectation("&", false);
    var peg$e9 = peg$literalExpectation(",", false);
    var peg$e10 = peg$literalExpectation("{}", false);
    var peg$e11 = peg$literalExpectation("{", false);
    var peg$e12 = peg$literalExpectation("}", false);
    var peg$e13 = peg$literalExpectation("[]", false);
    var peg$e14 = peg$literalExpectation("[", false);
    var peg$e15 = peg$literalExpectation("]", false);
    var peg$e16 = peg$literalExpectation("done", false);
    var peg$e17 = peg$literalExpectation("running", false);
    var peg$e18 = peg$literalExpectation("connected", false);
    var peg$e19 = peg$literalExpectation("error", false);
    var peg$e20 = peg$literalExpectation("exit", false);
    var peg$e21 = peg$literalExpectation("stopped", false);
    var peg$e22 = peg$otherExpectation("c-string");
    var peg$e23 = peg$literalExpectation('"', false);
    var peg$e24 = peg$otherExpectation("char");
    var peg$e25 = peg$classExpectation(["%", "\\", '"'], true, false);
    var peg$e26 = peg$literalExpectation("%", false);
    var peg$e27 = peg$literalExpectation("\\", false);
    var peg$e28 = peg$classExpectation([["0", "7"]], false, false);
    var peg$e29 = peg$otherExpectation("escaped");
    var peg$e30 = peg$literalExpectation("b", false);
    var peg$e31 = peg$literalExpectation("f", false);
    var peg$e32 = peg$literalExpectation("n", false);
    var peg$e33 = peg$literalExpectation("r", false);
    var peg$e34 = peg$literalExpectation("t", false);
    var peg$e35 = peg$otherExpectation("string");
    var peg$e36 = peg$classExpectation([["a", "z"], "-", "_"], false, false);
    var peg$e37 = peg$otherExpectation("token");
    var peg$e38 = peg$classExpectation([["0", "9"]], false, false);

    var peg$f0 = function () {
        return { type: "prompt" };
    };
    var peg$f1 = function () {
        return { type: "target", data: text() };
    };
    var peg$f2 = function (state, results) {
        return { type: "result", state, data: makeResults(results) };
    };
    var peg$f3 = function (obj) {
        return { type: "exec", state: obj.state, data: obj.data };
    };
    var peg$f4 = function (obj) {
        return { type: "status", state: obj.state, data: obj.data };
    };
    var peg$f5 = function (obj) {
        return { type: "notify", state: obj.state, data: obj.data };
    };
    var peg$f6 = function (data) {
        return { type: "console", data };
    };
    var peg$f7 = function (data) {
        return { type: "target", data };
    };
    var peg$f8 = function (data) {
        return { type: "log", data };
    };
    var peg$f9 = function (state, results) {
        return { state, data: makeResults(results) };
    };
    var peg$f10 = function (result) {
        return result;
    };
    var peg$f11 = function (value) {
        return value;
    };
    var peg$f12 = function (name, value) {
        return { name, value };
    };
    var peg$f13 = function () {
        return {};
    };
    var peg$f14 = function (result, results) {
        return makeResults([result, ...results]);
    };
    var peg$f15 = function () {
        return [];
    };
    var peg$f16 = function (value, values) {
        return [value, ...values];
    };
    var peg$f17 = function (result, results) {
        return [result, ...results];
    };
    var peg$f18 = function (chars) {
        return decodeURIComponent(chars.join(""));
    };
    var peg$f19 = function () {
        return "%25";
    };
    var peg$f20 = function (seq) {
        return "%" + parseInt(seq.join(""), 8).toString(16);
    };
    var peg$f21 = function (seq) {
        return seq;
    };
    var peg$f22 = function () {
        return "\b";
    };
    var peg$f23 = function () {
        return "\f";
    };
    var peg$f24 = function () {
        return "\n";
    };
    var peg$f25 = function () {
        return "\r";
    };
    var peg$f26 = function () {
        return "\t";
    };
    var peg$f27 = function () {
        return text();
    };
    var peg$f28 = function () {
        return parseInt(text(), 10);
    };

    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;

    var peg$result;

    if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error(
                "Can't start parsing from rule \"" + options.startRule + '".',
            );
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }

    function offset() {
        return peg$savedPos;
    }

    function range() {
        return {
            source: peg$source,
            start: peg$savedPos,
            end: peg$currPos,
        };
    }

    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
        location =
            location !== undefined
                ? location
                : peg$computeLocation(peg$savedPos, peg$currPos);

        throw peg$buildStructuredError(
            [peg$otherExpectation(description)],
            input.substring(peg$savedPos, peg$currPos),
            location,
        );
    }

    function error(message, location) {
        location =
            location !== undefined
                ? location
                : peg$computeLocation(peg$savedPos, peg$currPos);

        throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
        return {
            type: "class",
            parts: parts,
            inverted: inverted,
            ignoreCase: ignoreCase,
        };
    }

    function peg$anyExpectation() {
        return { type: "any" };
    }

    function peg$endExpectation() {
        return { type: "end" };
    }

    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;

        if (details) {
            return details;
        } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }

            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column,
            };

            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                } else {
                    details.column++;
                }

                p++;
            }

            peg$posDetailsCache[pos] = details;

            return details;
        }
    }

    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);

        return {
            source: peg$source,
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column,
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column,
            },
        };
    }

    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }

        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }

        peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
        return peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
        return peg$SyntaxError(
            peg$SyntaxError.buildMessage(expected, found),
            expected,
            found,
            location,
        );
    }

    function peg$parseLine() {
        var s0, s1, s2;

        s0 = peg$parseAsyncRecord();
        if (s0 === peg$FAILED) {
            s0 = peg$parseStreamRecord();
            if (s0 === peg$FAILED) {
                s0 = peg$parseResultRecord();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 6) === peg$c0) {
                        s1 = peg$c0;
                        peg$currPos += 6;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e0);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f0();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = [];
                        if (input.length > peg$currPos) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e1);
                            }
                        }
                        while (s2 !== peg$FAILED) {
                            s1.push(s2);
                            if (input.length > peg$currPos) {
                                s2 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e1);
                                }
                            }
                        }
                        peg$savedPos = s0;
                        s1 = peg$f1();
                        s0 = s1;
                    }
                }
            }
        }

        return s0;
    }

    function peg$parseAsyncRecord() {
        var s0;

        s0 = peg$parseExecAsyncOutput();
        if (s0 === peg$FAILED) {
            s0 = peg$parseStatusAsyncOutput();
            if (s0 === peg$FAILED) {
                s0 = peg$parseNotifyAsyncOutput();
            }
        }

        return s0;
    }

    function peg$parseStreamRecord() {
        var s0;

        s0 = peg$parseConsoleStreamOutput();
        if (s0 === peg$FAILED) {
            s0 = peg$parseTargetStreamOutput();
            if (s0 === peg$FAILED) {
                s0 = peg$parseLogStreamOutput();
            }
        }

        return s0;
    }

    function peg$parseResultRecord() {
        var s0, s1, s2, s3, s4;

        s0 = peg$currPos;
        s1 = peg$parseToken();
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        if (input.charCodeAt(peg$currPos) === 94) {
            s2 = peg$c1;
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e2);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parseResultClass();
            if (s3 !== peg$FAILED) {
                s4 = peg$parseResultsList();
                peg$savedPos = s0;
                s0 = peg$f2(s3, s4);
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseExecAsyncOutput() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parseToken();
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        if (input.charCodeAt(peg$currPos) === 42) {
            s2 = peg$c2;
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e3);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parseAsyncOutput();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f3(s3);
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseStatusAsyncOutput() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parseToken();
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        if (input.charCodeAt(peg$currPos) === 43) {
            s2 = peg$c3;
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e4);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parseAsyncOutput();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f4(s3);
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseNotifyAsyncOutput() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parseToken();
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c4;
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e5);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parseAsyncOutput();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f5(s3);
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseConsoleStreamOutput() {
        var s0, s1, s2;

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 126) {
            s1 = peg$c5;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e6);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseConst();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f6(s2);
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseTargetStreamOutput() {
        var s0, s1, s2;

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c6;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e7);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseConst();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f7(s2);
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseLogStreamOutput() {
        var s0, s1, s2;

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
            s1 = peg$c7;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e8);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseConst();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f8(s2);
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseAsyncOutput() {
        var s0, s1, s2;

        s0 = peg$currPos;
        s1 = peg$parseAsyncClass();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseResultsList();
            peg$savedPos = s0;
            s0 = peg$f9(s1, s2);
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseResultsList() {
        var s0, s1, s2, s3;

        s0 = [];
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c8;
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e9);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parseResult();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s1 = peg$f10(s3);
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
                s2 = peg$c8;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e9);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseResult();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s1 = peg$f10(s3);
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }

        return s0;
    }

    function peg$parseValuesList() {
        var s0, s1, s2, s3;

        s0 = [];
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c8;
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e9);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parseValue();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s1 = peg$f11(s3);
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
                s2 = peg$c8;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e9);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseValue();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s1 = peg$f11(s3);
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }

        return s0;
    }

    function peg$parseResult() {
        var s0, s1, s2, s3;

        s0 = peg$currPos;
        s1 = peg$parseString();
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c4;
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e5);
            }
        }
        if (s2 === peg$FAILED) {
            s2 = "";
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parseValue();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f12(s1, s3);
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        return s0;
    }

    function peg$parseValue() {
        var s0;

        s0 = peg$parseConst();
        if (s0 === peg$FAILED) {
            s0 = peg$parseTuple();
            if (s0 === peg$FAILED) {
                s0 = peg$parseList();
            }
        }

        return s0;
    }

    function peg$parseTuple() {
        var s0, s1, s2, s3, s4;

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c9) {
            s1 = peg$c9;
            peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e10);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f13();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c10;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e11);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseResult();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseResultsList();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                            s4 = peg$c11;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e12);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f14(s2, s3);
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }

        return s0;
    }

    function peg$parseList() {
        var s0, s1, s2, s3, s4;

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c12) {
            s1 = peg$c12;
            peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e13);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f15();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c13;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e14);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseValue();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseValuesList();
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s4 = peg$c14;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e15);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f16(s2, s3);
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c13;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e14);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseResult();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseResultsList();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 93) {
                                s4 = peg$c14;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e15);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f17(s2, s3);
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
        }

        return s0;
    }

    function peg$parseResultClass() {
        var s0;

        if (input.substr(peg$currPos, 4) === peg$c15) {
            s0 = peg$c15;
            peg$currPos += 4;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e16);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c16) {
                s0 = peg$c16;
                peg$currPos += 7;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e17);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c17) {
                    s0 = peg$c17;
                    peg$currPos += 9;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e18);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c18) {
                        s0 = peg$c18;
                        peg$currPos += 5;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e19);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c19) {
                            s0 = peg$c19;
                            peg$currPos += 4;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e20);
                            }
                        }
                    }
                }
            }
        }

        return s0;
    }

    function peg$parseAsyncClass() {
        var s0;

        if (input.substr(peg$currPos, 7) === peg$c20) {
            s0 = peg$c20;
            peg$currPos += 7;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e21);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseString();
        }

        return s0;
    }

    function peg$parseConst() {
        var s0, s1, s2, s3;

        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c21;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e23);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseChar();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseChar();
            }
            if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c21;
                peg$currPos++;
            } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e23);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f18(s2);
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e22);
            }
        }

        return s0;
    }

    function peg$parseChar() {
        var s0, s1, s2, s3, s4, s5;

        peg$silentFails++;
        if (peg$r0.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e25);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 37) {
                s1 = peg$c22;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e26);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f19();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                    s1 = peg$c23;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e27);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    if (peg$r1.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e28);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        if (peg$r1.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e28);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            if (peg$r1.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e28);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s3 = [s3, s4, s5];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f20(s2);
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                        s1 = peg$c23;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e27);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseEscaped();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f21(s2);
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e24);
            }
        }

        return s0;
    }

    function peg$parseEscaped() {
        var s0, s1;

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 34) {
            s0 = peg$c21;
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e23);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
                s0 = peg$c23;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                }
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 98) {
                s1 = peg$c24;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e30);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f22();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 102) {
                    s1 = peg$c25;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e31);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f23();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 110) {
                        s1 = peg$c26;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e32);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f24();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 114) {
                            s1 = peg$c27;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e33);
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f25();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 116) {
                                s1 = peg$c28;
                                peg$currPos++;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e34);
                                }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f26();
                            }
                            s0 = s1;
                        }
                    }
                }
            }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e29);
            }
        }

        return s0;
    }

    function peg$parseString() {
        var s0, s1, s2;

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r2.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e36);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$r2.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e36);
                    }
                }
            }
        } else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f27();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e35);
            }
        }

        return s0;
    }

    function peg$parseToken() {
        var s0, s1, s2;

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e38);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$r3.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e38);
                    }
                }
            }
        } else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f28();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e37);
            }
        }

        return s0;
    }

    function makeResults(arr) {
        // XXX: sometimes GDB/MI results don't have name (e.g.
        // `=breakpoint-modified` when `addr` property is `<MULTIPLE>`).
        // Below code helps to turn such records into the array.

        for (let i = 0; i < arr.length; i++) {
            if (!arr[i].name) arr[i].name = arr[i - 1] ? arr[i - 1].name : "unnamed";
        }

        let res = arr.reduce((acc, r) => {
            if (!acc[r.name]) acc[r.name] = [];
            acc[r.name].push(r.value);
            return acc;
        }, {});

        for (let name in res) {
            if (res[name].length === 1) res[name] = res[name][0];
        }

        return res;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }

        throw peg$buildStructuredError(
            peg$maxFailExpected,
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
            peg$maxFailPos < input.length
                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
        );
    }
}
